<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Moshe's Blog]]></title>
  <link href="http://kolodny.github.io/blog/atom.xml" rel="self"/>
  <link href="http://kolodny.github.io/blog/"/>
  <updated>2015-09-10T10:28:56-04:00</updated>
  <id>http://kolodny.github.io/blog/</id>
  <author>
    <name><![CDATA[Moshe Kolodny]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Removing Css From Your Workflow]]></title>
    <link href="http://kolodny.github.io/blog/blog/2015/08/26/removing-css-from-your-workflow/"/>
    <updated>2015-08-26T12:00:38-04:00</updated>
    <id>http://kolodny.github.io/blog/blog/2015/08/26/removing-css-from-your-workflow</id>
    <content type="html"><![CDATA[<p>I recently started a new project using webpack and babel and react. In the process I was able to eliminate css completely from my workflow. Here&rsquo;s how it used to look:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;my-list&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="nx">items</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">className</span><span class="o">=</span><span class="s2">&quot;list-item&quot;</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">item</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/li&gt;;</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/* sass or less */</span>
</span><span class='line'><span class="p">.</span><span class="nx">my</span><span class="o">-</span><span class="nx">list</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">font</span><span class="o">-</span><span class="nx">size</span><span class="o">:</span> <span class="mi">10</span><span class="nx">px</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">position</span><span class="o">:</span> <span class="nx">relative</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">.</span><span class="nx">list</span><span class="o">-</span><span class="nx">item</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">color</span><span class="o">:</span> <span class="nx">red</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>or something like that. The problem with this approach is that all the css rules are global so you have to make sure not to step on anyone else&rsquo;s toes. Projects like <a href="http://glenmaddern.com/articles/css-modules">CSS Modules</a> address this problem. Of course you can always namespace your modules with a root CSS class, but when you do have specific rules that are shared (invalid inputs for example), things start getting messy.</p>

<p>If you&rsquo;re already using babel and react then there&rsquo;s a similar solution you can use without installing anything else. The idea is to use <a href="https://facebook.github.io/react/tips/inline-styles.html">react inline style</a>. Using that we get rid of the everything being global and colliding with everything else problem So that&rsquo;s half the battle.</p>

<p>What about inheriting styles from other elements? Well instead of having a cascade happen, we can be explicit and declare exactly how we want to inherit other styles by using the <a href="https://github.com/sebmarkbage/ecmascript-rest-spread">spread operator</a>. Here&rsquo;s the final version of what the code would look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// style.js</span>
</span><span class='line'><span class="kr">export</span> <span class="kr">const</span> <span class="nx">ul</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">position</span><span class="o">:</span> <span class="s1">&#39;relative&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">fontSize</span><span class="o">:</span> <span class="mi">10</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="kr">const</span> <span class="nx">li</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span><span class="nx">ul</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;red&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// index.js</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">ul</span><span class="p">,</span> <span class="nx">li</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;./style&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">MyComponent</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">ul</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">ul</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="nx">items</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">li</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">item</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/li&gt;;</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>A great thing about this is that looking at the class and the spreads on it, you can easily see which rules will override other rules based on the spread position, for example <code>o1:{a:1}, o2={b:2}, o3={a:3}, final={ ...o1, ...o2, ...o3 }</code> then final will equal <code>{a:3, b:2}</code></p>

<p>This would make deep inheritance somewhat of a pain, but how often is deep inheritance actually needed? I suspect not that often</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The One Hour Side Project]]></title>
    <link href="http://kolodny.github.io/blog/blog/2015/03/03/the-one-hour-side-project/"/>
    <updated>2015-03-03T14:40:12-05:00</updated>
    <id>http://kolodny.github.io/blog/blog/2015/03/03/the-one-hour-side-project</id>
    <content type="html"><![CDATA[<p>I&rsquo;d like to talk about side projects. If you&rsquo;re a strict nine to fiver then this blog post probably isn&rsquo;t for you.</p>

<p>A lot of the side projects that I created when I first started programming were fairly ambitious in their functionality and complexity, this led to the average project I started taking at least a week to get to the point of releasable. Recently I started what I call <strong>&ldquo;The One Hour Side Project&rdquo;</strong>.</p>

<p>One of the things I love about javascript and web in general is the lack of effort required to get started. The popularity of PHP regardless of your opinion of the language is further proof of that. This idea of making things consumable in bite sized pieces is an extremely powerful concept and attracts people to it.</p>

<p><strong>&ldquo;The One Hour Side Project&rdquo;</strong> takes this idea to the area of side projects.</p>

<p>The first thing I would recommend would be to create a RandomProjects folder or something of that nature in your home/projects directory. When you think of something small or see a novel way to extend another library go ahead and create a folder/fork a repo and start hacking. The goal is to have something workable before you get up.</p>

<p>Ever create a browserify transform? Make a toUppercase transform<br/>
Curious about testing frameworks? Make a micro clone<br/>
Don&rsquo;t really &ldquo;get&rdquo; promises? Create your own take on it<br/>
Want it include jQuery on any page? Create a bookmarklet<br/>
Don&rsquo;t like the exact functionality of an extension? Fork it and modify</p>

<p>Screw around with some async stuff. Write a 10 line quicksort. Try to break babel. Start a blog.</p>

<p>Now get out there any make something!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solving the "Where Did This Tab Come From?" Question]]></title>
    <link href="http://kolodny.github.io/blog/blog/2015/01/20/solving-the-where-did-this-tab-come-from-question/"/>
    <updated>2015-01-20T20:07:03-05:00</updated>
    <id>http://kolodny.github.io/blog/blog/2015/01/20/solving-the-where-did-this-tab-come-from-question</id>
    <content type="html"><![CDATA[<p>Sometimes I find myself with long lived tabs and I don&rsquo;t always remember how I wound up on some of those pages.</p>

<p>Here&rsquo;s a neat little trick I discovered today while trying to find out if I should share an article with someone or if they already shared it with me.</p>

<p>First things first, <a href="https://developer.chrome.com/devtools#access">open dev-tools</a></p>

<p>Then go to the network panel <img src="http://i.imgur.com/PFYhqel.png" alt="network panel" /></p>

<p>Now refresh the page and scroll to the top of the list of resources and click the top one <img src="http://i.imgur.com/NRqEsZd.png" alt="referer" /></p>

<p>Under the referer request header you should see how you wound up on that page.</p>

<hr />

<p><small>
Thanks for <a href="?#comment-1805577800">mkoldnd</a> for inspiring this bookmarklet <strong><a href="javascript:(function()%7Bprompt(%22The%20referer%20for%20this%20page%20is:%22,document.referrer)%7D)()%3B">Referer</a></strong>
</small></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling Optional Args in JS]]></title>
    <link href="http://kolodny.github.io/blog/blog/2014/12/01/handling-optional-args-in-js/"/>
    <updated>2014-12-01T10:18:32-05:00</updated>
    <id>http://kolodny.github.io/blog/blog/2014/12/01/handling-optional-args-in-js</id>
    <content type="html"><![CDATA[<p>Often times I find myself writing functions which have optional args, while it&rsquo;s generally a better idea to pass an options object instead for mutliple arguments, three (maybe four) can still be considered an acceptable <a href="http://en.wikipedia.org/wiki/Arity">arity</a>.</p>

<p>Let&rsquo;s take a simple signature and implement some optional args.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">require</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">deps</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The way I started to deal with cases like this is as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">require</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">deps</span><span class="p">,</span> <span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="p">[].</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!==</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">args</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">args</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">args</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">!==</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">args</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">[</span><span class="nx">name</span><span class="p">,</span> <span class="nx">deps</span><span class="p">,</span> <span class="nx">fn</span><span class="p">]</span> <span class="o">=</span> <span class="nx">args</span><span class="p">;</span> <span class="c1">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I find this the clearest way to deal with optional args and I find the logic very easy to follow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evaling With Style]]></title>
    <link href="http://kolodny.github.io/blog/blog/2014/10/30/evaling-with-style/"/>
    <updated>2014-10-30T08:19:10-04:00</updated>
    <id>http://kolodny.github.io/blog/blog/2014/10/30/evaling-with-style</id>
    <content type="html"><![CDATA[<p>A couple of projects I&rsquo;ve been working on, required me to turn strings into functions (templating, custom require, <a href="https://github.com/kolodny/m2">mocha clone</a>) and it didn&rsquo;t seem like there was a good way to do it with things I needed in scope.</p>

<p>Let&rsquo;s take a look at a couple of ways to do it.</p>

<p>There&rsquo;s <a href="http://ejohn.org/blog/javascript-micro-templating/">John Resig&rsquo;s microtemplating way</a> which is something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s1">&#39;hello &lt;%= obj.name %&gt;, upperized: &lt;%= obj.name.toUpperCase() %&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Moshe&#39;</span> <span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">go</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;obj&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>      <span class="s1">&#39;var p = [];&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;p.push(&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;&quot;&#39;</span> <span class="o">+</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&lt;%= (.*?) %&gt;/g</span><span class="p">,</span> <span class="s1">&#39;&quot;, $1, &quot;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;&quot;&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;);&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;return p.join(&quot;&quot;)&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">go</span><span class="p">(</span><span class="nx">str</span><span class="p">)(</span><span class="nx">ctx</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The issue with this way is that this doesn&rsquo;t scale, since you have to keep adding more params of things you need scope for. For example if we wanted to add helper functions:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s1">&#39;hello &lt;%= obj.name %&gt;, upperized: &lt;%= helpers.up(obj.name) %&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">helpers</span> <span class="o">=</span> <span class="p">{</span><span class="nx">up</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">str</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span> <span class="p">}};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Moshe&#39;</span> <span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">go</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;obj&#39;</span><span class="p">,</span> <span class="s1">&#39;helpers&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>      <span class="s1">&#39;var p = [];&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;p.push(&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;&quot;&#39;</span> <span class="o">+</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&lt;%= (.*?) %&gt;/g</span><span class="p">,</span> <span class="s1">&#39;&quot;, $1, &quot;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;&quot;&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;);&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;return p.join(&quot;&quot;)&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">go</span><span class="p">(</span><span class="nx">str</span><span class="p">)(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">helpers</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see that this doesn&rsquo;t really work as more things are needed.</p>

<p>Another way is to use <code>with</code> to put things in scope:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s1">&#39;hello &lt;%= obj.name %&gt;, upperized: &lt;%= h.up(obj.name) %&gt;&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">helpers</span> <span class="o">=</span> <span class="p">{</span><span class="nx">up</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">str</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span> <span class="p">}};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Moshe&#39;</span> <span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">go</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;obj&#39;</span><span class="p">,</span> <span class="s1">&#39;expose&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>      <span class="s1">&#39;with (expose) {&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;var p = [];&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;p.push(&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="s1">&#39;&quot;&#39;</span> <span class="o">+</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&lt;%= (.*?) %&gt;/g</span><span class="p">,</span> <span class="s1">&#39;&quot;, $1, &quot;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;&quot;&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;);&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;return p.join(&quot;&quot;)&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;}&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">go</span><span class="p">(</span><span class="nx">str</span><span class="p">)(</span><span class="nx">ctx</span><span class="p">,</span> <span class="p">{</span><span class="nx">h</span><span class="o">:</span><span class="nx">helpers</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works really well but there&rsquo;s a <a href="http://jsperf.com/with-statement/4">huge performance hit from using <code>with</code></a></p>

<p>If you&rsquo;re using node there&rsquo;s a <a href="http://nodejs.org/api/vm.html">vm module</a> which is really what we&rsquo;re looking for, but I wanted something I could also use in the browser.</p>

<p>After playing around with this problem, I came up with the following solution:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">eval2</span><span class="p">(</span><span class="nx">str</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">expose</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">exposeKeys</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">exposeValues</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="k">in</span> <span class="nx">expose</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">expose</span><span class="p">,</span> <span class="nx">i</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">exposeKeys</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">exposeValues</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">expose</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Function</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;return function(&#39;</span> <span class="o">+</span> <span class="nx">exposeKeys</span> <span class="o">+</span> <span class="s1">&#39;){return function(){&#39;</span> <span class="o">+</span> <span class="nx">str</span> <span class="o">+</span> <span class="s1">&#39;}.bind(this)}&#39;</span>
</span><span class='line'>  <span class="p">))().</span><span class="nx">apply</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="nx">exposeValues</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You would use something like that as follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">expose</span> <span class="o">=</span> <span class="p">{</span><span class="nx">up</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">str</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">()</span> <span class="p">}};</span>
</span><span class='line'><span class="nx">eval2</span><span class="p">(</span><span class="s1">&#39;console.log(arguments)&#39;</span><span class="p">,</span> <span class="nx">ctx</span><span class="p">,</span> <span class="nx">expose</span><span class="p">)(</span><span class="s1">&#39;Look! Even has args!&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s go through how this works.</p>

<p>Consider this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;return function inner() {}&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span> <span class="c1">// &#39;function anonymous() {\nreturn function inner() {}\n}&#39;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">r</span><span class="p">().</span><span class="nx">toString</span><span class="p">())</span> <span class="c1">// &#39;function inner() {}&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;return function(a,b,c){console.log(a,b,c)}&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">toString</span><span class="p">())</span> <span class="c1">// &#39;function anonymous() {\nreturn function(a,b,c){console.log(a,b,c)}\n} &#39;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">s</span><span class="p">().</span><span class="nx">toString</span><span class="p">())</span> <span class="c1">// &#39;function (a,b,c){console.log(a,b,c)}&#39;</span>
</span><span class='line'><span class="nx">s</span><span class="p">()(</span><span class="s1">&#39;aa&#39;</span><span class="p">,</span> <span class="s1">&#39;bb&#39;</span><span class="p">,</span> <span class="s1">&#39;cc&#39;</span><span class="p">)</span> <span class="c1">// logs &#39;aa&#39;, &#39;bb&#39;, &#39;cc&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now going to back to the way we use it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">code</span> <span class="o">=</span> <span class="s1">&#39;console.log(this)&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="p">{</span><span class="nx">the</span><span class="o">:</span> <span class="s1">&#39;context&#39;</span><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;return function() {&#39;</span> <span class="o">+</span> <span class="nx">code</span> <span class="o">+</span> <span class="s1">&#39;}&#39;</span><span class="p">))().</span><span class="nx">call</span><span class="p">(</span><span class="nx">ctx</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you wanted to have some stuff in scope:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">code</span> <span class="o">=</span> <span class="s1">&#39;log(this); hey(this.the)&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="p">{</span><span class="nx">the</span><span class="o">:</span> <span class="s1">&#39;context&#39;</span><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;log&#39;</span><span class="p">,</span> <span class="s1">&#39;hey&#39;</span><span class="p">];</span> <span class="c1">// [].toString joins on comma by default so it just works</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">applies</span> <span class="o">=</span> <span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">},</span> <span class="nx">alert</span><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;return function(&#39;</span> <span class="o">+</span> <span class="nx">params</span> <span class="o">+</span> <span class="s1">&#39;) {&#39;</span> <span class="o">+</span> <span class="nx">code</span> <span class="o">+</span> <span class="s1">&#39;}&#39;</span><span class="p">))().</span><span class="nx">apply</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">applies</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if you wanted to curry it just wrap it in another function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">code</span> <span class="o">=</span> <span class="s1">&#39;log(this); hey(this.the)&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="p">{</span><span class="nx">the</span><span class="o">:</span> <span class="s1">&#39;context&#39;</span><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">params</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;log&#39;</span><span class="p">,</span> <span class="s1">&#39;hey&#39;</span><span class="p">];</span> <span class="c1">// [].toString joins on comma by default so it just works</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">applies</span> <span class="o">=</span> <span class="p">[</span><span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">},</span> <span class="nx">alert</span><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Function</span><span class="p">(</span><span class="s1">&#39;return function(&#39;</span> <span class="o">+</span> <span class="nx">params</span> <span class="o">+</span> <span class="s1">&#39;) {return function(){&#39;</span> <span class="o">+</span> <span class="nx">code</span> <span class="o">+</span> <span class="s1">&#39;}.bind(this)}&#39;</span><span class="p">))().</span><span class="nx">apply</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nx">applies</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I didn&rsquo;t really run any benchmarks but I suspect that this is pretty performant and once you wrap your head around it, is actually pretty simple.</p>

<p>Happy Coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Piping to Sublime]]></title>
    <link href="http://kolodny.github.io/blog/blog/2014/08/21/piping-to-sublime/"/>
    <updated>2014-08-21T12:26:31-04:00</updated>
    <id>http://kolodny.github.io/blog/blog/2014/08/21/piping-to-sublime</id>
    <content type="html"><![CDATA[<p>Every now and then I need to do a quick and dirty transform to a pipe. When it&rsquo;s a one off type of thing and I don&rsquo;t want to bother with awd sed or <a href="https://www.npmjs.org/package/nip">nip</a>, I&rsquo;ll use sublime to do a quick transform</p>

<p><img src="http://i.imgur.com/5hnjaHk.png" alt="in progress" />
<img src="http://i.imgur.com/lMClbyG.png" alt="saved" /></p>

<p>And when you save and exit:</p>

<p><img src="http://i.imgur.com/y2vOfyU.jpg" alt="done" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When Programming Goes Bad - Debugging the Impossible]]></title>
    <link href="http://kolodny.github.io/blog/blog/2014/07/21/when-programming-goes-bad-debugging-the-impossible/"/>
    <updated>2014-07-21T10:28:09-04:00</updated>
    <id>http://kolodny.github.io/blog/blog/2014/07/21/when-programming-goes-bad-debugging-the-impossible</id>
    <content type="html"><![CDATA[<p>Sometimes code for a project gets so big and so deeply indirected that debugging is nearly impossible.</p>

<p>We had a bug similar to this where a controller was changing models which triggered avalanches of cascades that no human could follow. The only thing we knew was that a select with an id of <code>elusive</code> was being changed through jQuery.</p>

<p>After trying in vain to figure out where the change was happening, I had an <a href="http://en.wikipedia.org/wiki/Eureka_effect">aha! moment</a></p>

<p>This is basically how I solved it:</p>

<div>
  <pre><code class='javascript'>(function($) {
    var oldAttr = $.fn.attr;
    var oldProp = $.fn.prop;
    $.fn.attr = function() {
        if (this.id === 'elusive') {
            debugger;           
        }
        return oldAttr.apply(this, arguments);
    };
    $.fn.prop = function() {
        if (this.id === 'elusive') {
            debugger;           
        }
        return oldProp(this, arguments);
    };
})(jQuery);</code></pre>
</div>


<p>Then it&rsquo;s just a matter of looking at the call stack and working backwards from there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Async Javascript Code in Sync Format - Part 2]]></title>
    <link href="http://kolodny.github.io/blog/blog/2014/07/15/writing-async-javascript-code-in-sync-format-part-2/"/>
    <updated>2014-07-15T12:33:23-04:00</updated>
    <id>http://kolodny.github.io/blog/blog/2014/07/15/writing-async-javascript-code-in-sync-format-part-2</id>
    <content type="html"><![CDATA[<p><a href="http://kolodny.github.io/blog/blog/2014/06/26/semi-async-js/">This is a continuation of Writing Async Javascript Code in Sync Format &ndash; Part 1</a></p>

<p>There&rsquo;s a new es6 feature called <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment">Destructuring Assignment</a> that looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var [a, b] = ['a', 'b'];
</span><span class='line'>a === 'a';
</span><span class='line'>b === 'b';
</span><span class='line'>var {q:q, r:r} = {q: 'q', r: 'r'};
</span><span class='line'>q === 'q';
</span><span class='line'>r === 'r';</span></code></pre></td></tr></table></div></figure>


<p>Keep in mind that objects can mimic arrays so this works:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var [x,y] = {0: 'x', 1: 'y'};
</span><span class='line'>x === 'x';
</span><span class='line'>y === 'y';</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s also a shortcut available for assigning to objects in es6 where <code>var {x:x, y:y}</code> can be written as <code>var {x, y}</code> This means we could have written</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var {q, r} = {q: 'q', r: 'r'};
</span><span class='line'>q === 'q';
</span><span class='line'>r === 'r';</span></code></pre></td></tr></table></div></figure>


<p>Using this knowledge and what we did in the first part we can write really cool concurrent code:</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/SLTx9/embedded/js,result/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p><code>Promise.props</code> is a bluebird specific function that does what <code>Promise.all</code> except on objects. <a href="https://github.com/kolodny/promise-utils/blob/master/promise-props.js">If you&rsquo;re using native Promises it doesn&rsquo;t take much to polyfill it</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Async Javascript Code in Sync Format - Part 1]]></title>
    <link href="http://kolodny.github.io/blog/blog/2014/06/26/semi-async-js/"/>
    <updated>2014-06-26T11:32:44-04:00</updated>
    <id>http://kolodny.github.io/blog/blog/2014/06/26/semi-async-js</id>
    <content type="html"><![CDATA[<p>Writing async code is hard when not done properly. However there are ways to make it a breeze. One of them is to use promises and not have to worry about code being async or not.</p>

<p>I was looking around at different things and came across <a href="https://github.com/koajs/koa">koa</a> and got inspired to try a similar idea.</p>

<p>The basic idea of Koa is that when you need some async functionality you yield an async thingy like a promise or something similar and then koa waits for it to resolve and then continues your program injecting the new value into the function.</p>

<p>Sounds complicated? Let&rsquo;s try an example (all examples will only run in FF unless Chrome decides to support generators)</p>

<p>Let&rsquo;s start with a simple generator.</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/2QsBH/embedded/js,result/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>As you can see the syntax is <code>function *() {}</code> and you need to instantiate a generator before you can use it.
For more info on the basics of generators see <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*">MDN</a></p>

<p>A cool thing about generators is that you can inject a value back into the generator function like so:</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/2QsBH/1/embedded/js,result/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>You actually can&rsquo;t inject something into the first <code>.next()</code> call, if you try you get this error: <code>TypeError: attempt to send "a" to newborn generator</code></p>

<p>Using just these two concepts and the very basics about Promises, we can write something that:</p>

<ol>
<li>Runs a generator until control is given back</li>
<li>If result if promise like, then resolve it and inject the resolved value back to the generator</li>
<li>Rinse and repeat.</li>
</ol>


<p>Let&rsquo;s start to write just that. Here&rsquo;s what out program will look like:</p>

<div>
  <pre><code class='javascript'>function *program() {
    var rand;
    rand = yield getRandAsync();
    console.log('first time around = ' + rand);
    rand = yield getRandAsync();
    console.log('second time around = ' + rand);
}

function getRandAsync() {
    return Promise.resolve(Math.random())
}

run(program());</code></pre>
</div>


<p>Now all we need to do is write the <code>run</code> function:</p>

<div>
  <pre><code class='javascript'>function run(gen) {

    step();

    function step(value) {
        var result = gen.next(value);
        if (result.value instanceof Promise) {
            result.value.then(step);
        }
    }

}</code></pre>
</div>


<p>Putting that all together:</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/JHFd5/embedded/js,result/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>Now a couple of nice thigs to have. Let&rsquo;s assume that sometime in the future <code>getRandAsync</code> is changed to just return a value and not a promise, we should handle that:</p>

<div>
  <pre><code class='javascript'>function run(gen) {

    step();

    function step(value) {
        var result = gen.next(value);
        if (result.value instanceof Promise) {
            result.value.then(step);
        } else if (!result.done) {
            step(result.value);
        }
    }

}</code></pre>
</div>


<p>Easy enough. Now how would we handle concurrent async functions? Well the Promise object has a method <code>all</code> which handles it nicely, we just need to utilize it (<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">MDN</a> ctrl+f <code>Promise.all</code>):</p>

<div>
  <pre><code class='javascript'>function run(gen) {

    step();

    function step(value) {
        var result = gen.next(value);
        if (result.value instanceof Promise) {
            result.value.then(step);
        } else if (result.value instanceof Array) {
            Promise.all(result.value).then(step);
        } else if (!result.done) {
            step(result.value);
        }
    }

}</code></pre>
</div>


<p>Now we can yield an array of promises to <code>run</code> and <code>Promise.all</code> will handle them. <a href="http://kolodny.github.io/blog/blog/2014/04/23/future-proof-your-code-with-promises/">The great thing about <code>Promise.all</code> is that it will handle an array of non promises just as well</a></p>

<p>putting that all together we get a very powerfull way to write javascript:</p>

<iframe width="100%" height="300" src="http://jsfiddle.net/XKYVB/embedded/js,result/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p><a href="https://gist.github.com/kolodny/6691380b57abd5b56251"><strong>Gist</strong></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Require a Promise]]></title>
    <link href="http://kolodny.github.io/blog/blog/2014/06/09/require-a-promise/"/>
    <updated>2014-06-09T15:25:18-04:00</updated>
    <id>http://kolodny.github.io/blog/blog/2014/06/09/require-a-promise</id>
    <content type="html"><![CDATA[<p>I was recently asked how to make a node module that needs to do a database lookup or something else before it can give you an API. The main problem is that <code>require</code> is synchronize and doesn&rsquo;t have a concept of callback or a mechanism to wait for a response The are a couple of ways to solve this, I&rsquo;ll first go through the standard solution and then how I would do it.</p>

<p>The standard way people solve this is by having the API take a callback:</p>

<div>
  <pre><code class='javascript'>var gister = require('gister');

gister(function(err, create) {
    if (err) throw err;
    create(fileContents);
});</code></pre>
</div>


<p>Now this is easy to read and makes a lot of sense, but you run into a problem of when you have more than one module like this:</p>

<div>
  <pre><code class='javascript'>var gister = require('gister');
var snippeter = require('snippeter');
var apis = {};
var ticks = 2;

gister(function(err, create) {
    if (err) throw err;
    apis.gister = create;
    if (--ticks === 0) ready(apis);
});
snippeter(function(err, create) {
    if (err) throw err;
    apis.snippeter = create;
    if (--ticks === 0) ready(apis);
});
function ready(apis) {
    // apis.gister
    // apis.snippeter
}</code></pre>
</div>


<p>This definitly doesn&rsquo;t scale, fortunately we can solve this using the magic of <a href="http://kolodny.github.io/blog/blog/2014/04/23/future-proof-your-code-with-promises/"><strong>Promises</strong></a></p>

<p>File index.js:</p>

<div>
  <pre><code class='javascript'>var Promise = require(&quot;bluebird&quot;);

var soon = require('./soon.js');

Promise.all([soon]).then(function(soon) {
    console.log(soon);
});</code></pre>
</div>


<p>File soon.js</p>

<div>
  <pre><code class='javascript'>var Promise = require(&quot;bluebird&quot;);

var ret = {
    obj: 'to return'
};

module.exports = new Promise(function(resolve, reject) {
    setTimeout(function() {
        if (Math.random() &lt; .1) {
            console.log('about to reject');
            reject(new Error('Db error'));
            console.log('rejected');
        } else {
            console.log('about to resolve');
            resolve(ret);
            console.log('resolved');
        }
    }, 5000);
});

//module.exports = ret;</code></pre>
</div>


<p>Now the cool thing about doing it this way is that we can switch back to a synchronize way of loading without having to change any code. We can simulate this by uncommenting the last line <code>//module.exports = ret;</code> and it will still run the same</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Object.observe Nested Objects]]></title>
    <link href="http://kolodny.github.io/blog/blog/2014/05/21/object-dot-observe-nested-objects/"/>
    <updated>2014-05-21T11:20:31-04:00</updated>
    <id>http://kolodny.github.io/blog/blog/2014/05/21/object-dot-observe-nested-objects</id>
    <content type="html"><![CDATA[<p>A great article came out yesterday: <a href="http://www.html5rocks.com/en/tutorials/es7/observe/">Data-binding Revolutions with Object.observe()</a></p>

<p>If you didn&rsquo;t read it yet, go read it then come back here.</p>

<p>Ok the basic idea of that article is that you can do things like this</p>

<div>
  <pre><code class='javascript'>var model = {};

// Which we then observe
Object.observe(model, function(changes){

    // This asynchronous callback runs and aggregates changes
    changes.forEach(function(change) {

        // Letting us know what changed
        console.log(change.type, change.name, change.oldValue);
    });

});
model.adding = 'a prop';
model.nested = { obj: 'thing' };
model.nested.obj = 'another thing';</code></pre>
</div>


<p>running that in the console we get:</p>

<div>
  <pre><code class='javascript'>add adding undefined
add nested undefined</code></pre>
</div>


<p>Now it would be cool if there was a way to observe nested objects. Here&rsquo;s a simple function to do so:</p>

<div>
  <pre><code class='javascript'>function observeNested(obj, callback) {
    Object.observe(obj, function(changes){
        changes.forEach(function(change) {
            if (typeof obj[change.name] == 'object') {
                observeNested(obj[change.name], callback);
            }
        });
        callback.apply(this, arguments);
    });
}</code></pre>
</div>


<p>Now at first glance it would seem this doesn&rsquo;t work:</p>

<div>
  <pre><code class='javascript'>function observeNested(obj, callback) {
    Object.observe(obj, function(changes){
        changes.forEach(function(change) {
            if (typeof obj[change.name] == 'object') {
                observeNested(obj[change.name], callback);
            }
        });
        callback.apply(this, arguments);
    });
}

var model = {};

// Which we then observe
observeNested(model, function(changes){
    changes.forEach(function(change) {
        console.log(change.type, change.name, change.oldValue);
    });
});
model.adding = 'a prop';
model.nested = { obj: 'thing' };
model.nested.obj = 'another thing';</code></pre>
</div>


<p>Still shows:</p>

<div>
  <pre><code class='javascript'>add adding undefined
add nested undefined</code></pre>
</div>


<p>But then I remembered that (and I&rsquo;m quiting from the article):
<code>Object.observe(), part of a future ECMAScript standard, is a method for asynchronously observing changes to JavaScript objects</code></p>

<p>So in the case above since the two assignments to <code>model.nested</code> happen right after another, it only logs it as one event, If you were using promises to some other async mechanism it would work as advertised:</p>

<div>
  <pre><code class='javascript'>function observeNested(obj, callback) {
    Object.observe(obj, function(changes){
        changes.forEach(function(change) {
            if (typeof obj[change.name] == 'object') {
                observeNested(obj[change.name], callback);
            }
        });
        callback.apply(this, arguments);
    });
}

var model = {};

// Which we then observe
observeNested(model, function(changes){
    changes.forEach(function(change) {
        console.log(change.type, change.name, change.oldValue);
    });
});
setTimeout(function() {
    model.adding = 'a prop';
}, 200);
setTimeout(function() {
    model.nested = { obj: 'thing' };
}, 400);
setTimeout(function() {
    model.nested.obj = 'another thing';
}, 600);</code></pre>
</div>


<p>Which shows:</p>

<div>
  <pre><code class='javascript'>add adding undefined
add nested undefined
update obj thing</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unoptimize V8 for Easy Debugging]]></title>
    <link href="http://kolodny.github.io/blog/blog/2014/05/19/unoptimize-devtools-for-easy-debugging/"/>
    <updated>2014-05-19T11:42:09-04:00</updated>
    <id>http://kolodny.github.io/blog/blog/2014/05/19/unoptimize-devtools-for-easy-debugging</id>
    <content type="html"><![CDATA[<p>Every now and then I need to debug something in DevTools and I get this puzzling error:</p>

<p><a href="http://i.imgur.com/nRvfrMy.png"><img src="http://i.imgur.com/nRvfrMy.png" alt="ReferenceError" /></a></p>

<p>That&rsquo;s V8 optimizing the function and seeing that <code>thing</code> isn&rsquo;t used in the function and therefore not putting it into the closure scope. There are a couple of ways to break this optimization, one is to use <code>thing</code> somewhere in the debugging function, however the problem with this is that you must enumerate all the vars you want to inspect. An easier technique I&rsquo;ve found is to make it impossible for V8 to know what vars will be used in the function. What that entails is to just have a blank <code>eval</code> in the function somewhere (I usually put in right before the debugger statement):</p>

<p><a href="http://i.imgur.com/wnFtgte.png"><img src="http://i.imgur.com/wnFtgte.png" alt="ReferenceError" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Future Proof Your Code With Promises and Promise.all]]></title>
    <link href="http://kolodny.github.io/blog/blog/2014/04/23/future-proof-your-code-with-promises/"/>
    <updated>2014-04-23T11:50:39-04:00</updated>
    <id>http://kolodny.github.io/blog/blog/2014/04/23/future-proof-your-code-with-promises</id>
    <content type="html"><![CDATA[<p>When starting out with async code there are a few option to manage the callback hell. The one gaining the most traction is promises.</p>

<p><small>I starting writing a promise-like library when I first heard of promises: <a href="https://github.com/kolodny/wttt">WTTT (When This Then That)</a></small></p>

<p>I was playing around with socket.io and had to do some async code as follows:</p>

<div>
  <pre><code class='javascript'>socket.on('join', function(id, name, callback) {
  socket.join(id);
  socket.name = name;
  var people = _.map(io.sockets.clients(room), function(socket) {
    return {
      id: socket.id,
      name: socket.name,
    };
  });
  callback(people);
});</code></pre>
</div>


<p>Looking at the <a href="http://socket.io/#how-to-use">docs</a> show that I should be using an async version as follows:</p>

<div>
  <pre><code class='javascript'>socket.on('join', function(id, name, callback) {
  socket.join(id) // this is still a sync function
  socket.set('name', name, function() {
    var people = ???;
    callback(people);
  });
});</code></pre>
</div>


<p>As you can see there&rsquo;s some magic that we need to do. Enter promises.</p>

<p>The basic usage is as follows</p>

<div>
  <pre><code class='javascript'>var promise = new Promise(function(resolve, reject) {
  setTimeout(function() {
    resolve(&quot;It's now two seconds later&quot;);
  }, 2000);
});
promise.then(function(value) {
  // value === &quot;It's now two seconds later&quot;;
});</code></pre>
</div>


<p>The library that I&rsquo;m using is <a href="https://github.com/petkaantonov/bluebird">bluebird</a>, they provide a <code>Promise.promisifyAll</code> method which takes an object
and converts all it&rsquo;s methods that have node style callbacks (<code>function callback(err, result) {...}</code>) as a last argument to promises</p>

<p>Promises by itself is not really that usefull, but the real power comes when you need to do many things at once, that&rsquo;s what Promise.all is for</p>

<div>
  <pre><code class='javascript'>var resolveTo = function(thing) {
  return new Promise(function(resolve) {
    resolve(thing);
  });
};
var promises = [resolveTo('Apple'), resolveTo('Orange')]
Promise.all(promises).then(function(results) {
  // results === ['Apple', 'Orange'];
});</code></pre>
</div>


<p><code>Promise.all</code> also can take a non-thenable value and use it as is for example</p>

<div>
  <pre><code class='javascript'>var promises = [resolveTo('Apple'), resolveTo('Orange'), 42]
Promise.all(promises).then(function(results) {
  // results === ['Apple', 'Orange', 42];
});</code></pre>
</div>


<p>Armed with this we can now write the above socket code as follows</p>

<div>
  <pre><code class='javascript'>socket.on('join', function(id, name, callback) {
  socket.join(id) // this is still a sync function
  socket.setAsync('name').then(function() {
    getPeopleAsync(id).then(function(people) {
      callback(people);
    });
  });
});
function getPeopleAsync(roomId) {
  return new Promise(function(resolve, reject) {
    var people = io.sockets.clients(room);
    var promises = [];
    people.forEach(function(socket) {
      promises.push(
        new Promise(function(resolveInner) {
          Promise.all([socket.id, socket.getAsync('name')]).then(function(results) {
            resolveInner({id: results[0], name: results[1]});
          });
        });
      );
    });
    Promise.all(promises).then(function(people) {
      resolve(people);
    });
  });
}</code></pre>
</div>


<p>Which <code>getPeopleAsync</code> can be refactored to:</p>

<div>
  <pre><code class='javascript'>function getPeopleAsync(roomId) {
  return new Promise(function(resolve, reject) {
    var people = io.sockets.clients(room);
    var promises = [];
    people.forEach(function(socket) {
      promises.push(
        new Promise(function(resolveInner) {
          Promise.all([socket.id, socket.getAsync('name')]).then(function(results) {
            resolveInner({id: results[0], name: results[1]});
          })
        })
      );
    });
    Promise.all(promises).then(resolve);
  });
}</code></pre>
</div>


<p>Which <code>getPeopleAsync</code> can be refactored to:</p>

<div>
  <pre><code class='javascript'>function getPeopleAsync(roomId) {
  var people = io.sockets.clients(room);
  var promises = [];
  people.forEach(function(socket) {
    promises.push(
      new Promise(function(resolve) {
        Promise.all([socket.id, socket.getAsync('name')]).then(function(results) {
          resolve({id: results[0], name: results[1]});
        })
      })
    );
  });
  return Promise.all(promises)
}</code></pre>
</div>


<p>Now this lets us use Promise, notably Promise.all without having to worry about code ever changing from sync to async, consider:</p>

<div>
  <pre><code class='javascript'>Promise.all(socket.getAsync('name'), socket.getAsync('joined'), serverId, personRecord).then(function(results) {
  // do things with results
});</code></pre>
</div>


<p>and</p>

<div>
  <pre><code class='javascript'>Promise.all(socket.getAsync('name'), socket.getAsync('joined'), serverId, db.getPersonAsync(personId)).then(function(results) {
  // do things with results
  // absolutely no changes needed here
});</code></pre>
</div>


<p>Happy coding</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[See Return Value in DevTools]]></title>
    <link href="http://kolodny.github.io/blog/blog/2014/04/01/see-return-value-in-devtools/"/>
    <updated>2014-04-01T11:05:39-04:00</updated>
    <id>http://kolodny.github.io/blog/blog/2014/04/01/see-return-value-in-devtools</id>
    <content type="html"><![CDATA[<p>I noticed recently that Dev Tools lets you take a look at what a function is about to return. Take a look at this screen:
<img src="http://i.imgur.com/aL9QiSb.png" alt="see return value" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Favorite jQuery Plugin Template]]></title>
    <link href="http://kolodny.github.io/blog/blog/2013/12/27/my-favorite-jquery-plugin-template/"/>
    <updated>2013-12-27T10:57:16-05:00</updated>
    <id>http://kolodny.github.io/blog/blog/2013/12/27/my-favorite-jquery-plugin-template</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve dabbled quite a bit in jQuery and writing plugins for it. I&rsquo;ve played around with quite a few different ways to start a plugin, and now I&rsquo;ve got a new favorite:</p>

<div>
  <pre><code class='javascript'>;(function($) {
  // multiple plugins can go here
  (function(pluginName) {
    var defaults = {
      color: 'black',
      testFor: function(div) {
        return true;
      }
    };
    $.fn[pluginName] = function(options) {
      options = $.extend(true, {}, defaults, options);
            
      return this.each(function() {
        var elem = this,
          $elem = $(elem);

        // heres the guts of the plugin
          if (options.testFor(elem)) {
            $elem.css({
              borderWidth: 1,
              borderStyle: 'solid',
              borderColor: options.color
            });
          }
      });
    };
    $.fn[pluginName].defaults = defaults;
  })('borderize');
})(jQuery);</code></pre>
</div>


<p>Now let&rsquo;s see how we would use it.</p>

<div>
  <pre><code class='javascript'>$('div').borderize();
$('div').borderize({color: 'red'});</code></pre>
</div>




<iframe width="100%" height="300" src="http://jsfiddle.net/EVL22/embedded/result,js,html" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p> Here&rsquo;s some of the reasons that I like this technique</p>

<ol>
<li>You can still use a default option inside of a override (similar to calling a parent property in class based programming)</li>
<li>Easily change the name of the plugin as long as we use pluginName all over (also there&rsquo;s an insignificant minification advantage of that).</li>
<li>Cleaner (at least in my opinion)</li>
</ol>


<p> Point #1 is huge, let&rsquo;s see an example that. Let&rsquo;s say we want to override the <code>testFor</code> function but still want the option of defaulting to the original behaviour</p>

<div>
  <pre><code class='javascript'>$('.borderize').borderize({
    testFor: function(elem) {
        var $elem = $(elem);
        if (elem.is('.inactive')) {
            return false;
        } else {
            // calling &quot;parent&quot; function
            return $.fn.borderize.defaults.testFor.apply(this, arguments);
        }
    }
});</code></pre>
</div>


<p>We can even do this with regular properties like this</p>

<div>
  <pre><code class='javascript'>var someVarThatMayBeSet = false;
/* code ... */

$('.borderize').borderize({
    color: someVarThatMayBeSet ? 'red' : $.fn.borderize.defaults.color
});</code></pre>
</div>




<iframe width="100%" height="300" src="http://jsfiddle.net/GDqrC/embedded/result,js,html" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>Do you have a different style that you like? Leave a comment below</p>

<p>Edit I&rsquo;ve changed the <code>$.each</code> call to <code>$.extend(true, {}, defaults, options);</code> based on <a href="https://news.ycombinator.com/item?id=6971361">phlyingpenguin</a> comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beating Amazon]]></title>
    <link href="http://kolodny.github.io/blog/blog/2013/11/25/beating-amazon/"/>
    <updated>2013-11-25T21:04:31-05:00</updated>
    <id>http://kolodny.github.io/blog/blog/2013/11/25/beating-amazon</id>
    <content type="html"><![CDATA[<p>Everytime I see a site that <strong>requires</strong> user interaction, it gives me a chance to practice some hackery.
Case in point: <a href="http://www.amazon.com/Black-Friday/b/ref=bf2013_bunk_galaxy?node=384082011">Amazon black friday deals.</a></p>

<p>Amazon wants you to wait on the page counting down like you have nothing better to do.
As a programmer I&rsquo;d rather make a script to do that for me.</p>

<p>It brought me back a bit as their version of jQuery is 1.6.4. Anyway here&rsquo;s the script, you can
open the javascript console with <code>Ctrl + Shift + J</code> then paste the code below in or you can use
the bookmarklet:</p>

<h1>
    <small><small><small>bookmarklet:</small></small></small>
    <a onclick="alert('Drag this to your bookmarks bar and when you\'re on the black friday page click it');return false" href='javascript:(function($){function re__waitForIt__serve($item){var interval=setInterval(function(){var $buyButton=$item.find(".btn");if($buyButton.length){clearInterval(interval);$buyButton[0].click();setTimeout(function(){alert("Item (hopefully) available to buy!");$item.css("outline","1px solid green")},5E3)}},100)}jQuery("body").delegate("li[id]","mouseenter.grabber",function(){var $this=$(this);$this.css("outline","1px solid red");$this.delegate("*","click.grabber",function(){re__waitForIt__serve($this);$this.css("outline", "1px solid blue");$("*").unbind(".grabber");alert("All set to buy item");return false});$this.bind("mouseleave.grabber",function(){$this.css("outline","none")})})})(jQuery);'>Amazon Clicker</a>
</h1>




<div>
  <pre><code class='javascript'>(function($) {
    function re__waitForIt__serve($item) {
        var interval = setInterval(function() {
            var $buyButton = $item.find('.btn');
            if ($buyButton.length) {
                clearInterval(interval);
                $buyButton[0].click();
                setTimeout(function() {
                    alert('Item (hopefully) available to buy!');
                    $item.css('outline', '1px solid green');
                }, 5000)
            }
        }, 100);
    }
    jQuery('body').delegate('li[id]', 'mouseenter.grabber', function() {
        var $this = $(this);
        $this.css('outline', '1px solid red');
        $this.delegate('*', 'click.grabber', function() {
            re__waitForIt__serve($this);
            $this.css('outline', '1px solid blue');
            $('*').unbind('.grabber')
            alert('All set to buy item');
            return false;
        });
        $this.bind('mouseleave.grabber', function() { $this.css('outline', 'none'); });
    });
})(jQuery);</code></pre>
</div>


<p>(Tested in Chrome)</p>

<p>Think there&rsquo;s a better way to do this? Did you ever have to do something like this?<br/>
Leave a comment below</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful Snippets]]></title>
    <link href="http://kolodny.github.io/blog/blog/2013/11/24/useful-snippets/"/>
    <updated>2013-11-24T14:25:14-05:00</updated>
    <id>http://kolodny.github.io/blog/blog/2013/11/24/useful-snippets</id>
    <content type="html"><![CDATA[<p>I recently found <a href="http://bgrins.github.io/devtools-snippets/">this useful page for devtools snippets</a></p>

<p>I never really used snippets before (I do have a ton of bookmarklets though), and I wanted to
incorporate all the snippets on that page. There really isn&rsquo;t any built in way to do that, but since practically
everything in Chrome is exposed we can hack a way into it.</p>

<p>First off let&rsquo;s see what we have already. Open dev-tools and take a look at the snippets.</p>

<p><a href="http://i.imgur.com/AI7ch4d.png"><img src="http://i.imgur.com/AI7ch4d.png" alt="check for snippets" /></a></p>

<p>If it doesn&rsquo;t open in a new window then click the circled icon to open dev-tools in a new window.</p>

<p>Now you should have something that looks like this:</p>

<p><a href="http://i.imgur.com/1xL13sh.png"><img src="http://i.imgur.com/1xL13sh.png" alt="dev-tools in a new window" /></a></p>

<p>Now comes the cool part, we&rsquo;re going to open devtools on the devtools window. With the active window the
dev-tools window click <code>Ctrl + Shift + J</code> and you should see this:</p>

<p><a href="http://i.imgur.com/dAO8Rh3.png"><img src="http://i.imgur.com/dAO8Rh3.png" alt="inception dev-tools" /></a></p>

<p>Now go to the Resources tab and Local Storage, there may be more then one but it should be easy to figure
out which one you need, then go to the scriptSnippets object:</p>

<p><a href="http://i.imgur.com/pcpPbsM.png"><img src="http://i.imgur.com/pcpPbsM.png" alt="scriptSnippets" /></a></p>

<p>Hopefully you can see where this is going. Let&rsquo;s open up a dev-tools window on the second one by clicking
<code>Ctrl + Shift + J</code> on the second window, I resized a bit to make it more manageable:</p>

<p><a href="http://i.imgur.com/6vSHVH0.png"><img src="http://i.imgur.com/6vSHVH0.png" alt="" /></a></p>

<p>Now let&rsquo;s head over to <a href="http://bgrins.github.io/devtools-snippets/">http://bgrins.github.io/devtools-snippets/</a> and scrape the snippets. Open up the
console on that page and paste:</p>

<div>
  <pre><code class='javascript'>&gt; var snippetsWrappers = document.getElementsByClassName('snippet-wrapper');
  var snippets = [];
  for (var i = 0; i &lt; snippetsWrappers.length; i++) {
      snippets.push({
          name: snippetsWrappers[i].id,
          content: '//' + snippetsWrappers[i].childNodes[0].innerText.replace('\n', '\n//') +
              '\n' + snippetsWrappers[i].childNodes[1].innerText
      });
  }
  copy(JSON.stringify(snippets));</code></pre>
</div>


<p>We now have a stringified version of the snippets in the system clipboard using the magic of
<a href="../../../../2013/10/16/devtools-copy-to-clipboard/">copy on the console</a></p>

<p>Now that we have that in the clipboard we can now close that window.  Now we need to merge in what we
have in the clipboard with the current snippets, one way to do that is with this (in the right hand
side window):</p>

<div>
  <pre><code class='javascript'>&gt; var snippetsToAdd = JSON.parse(prompt('Hit ctrl + v and enter'));
  var currentSnippets = JSON.parse(localStorage.scriptSnippets);
  var nextId = Math.max.apply(Math, currentSnippets.map(function(obj) { return obj.id })) + 1;
  for (var i = 0; i &lt; snippetsToAdd.length; i++) {
      currentSnippets.push({
          name: snippetsToAdd[i].name,
          content: snippetsToAdd[i].content,
          id: nextId++
      });
  }
  localStorage.scriptSnippets = JSON.stringify(currentSnippets);</code></pre>
</div>


<p><a href="http://i.imgur.com/ZXzD3Y3.png"><img src="http://i.imgur.com/ZXzD3Y3.png" alt="merging in snippets" /></a></p>

<p>You&rsquo;ll get a prompt and you need to paste in the contents of the clipboard. This was the easiest way I could
think of to share data between windows</p>

<p>If all went as planned then put focus on the bottom left window, hit F5 and you should now see:</p>

<p><a href="http://i.imgur.com/PGoqrjB.png"><img src="http://i.imgur.com/PGoqrjB.png" alt="Success!!" /></a></p>

<p>You can see that the snippets are there in the top left window.</p>

<p>Play around while you&rsquo;re in there,  hopefully you&rsquo;ll learn about the internals of how dev-tools work</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Make News More Fun]]></title>
    <link href="http://kolodny.github.io/blog/blog/2013/11/10/make-news-more-fun/"/>
    <updated>2013-11-10T08:33:00-05:00</updated>
    <id>http://kolodny.github.io/blog/blog/2013/11/10/make-news-more-fun</id>
    <content type="html"><![CDATA[<p>I just read <a href="http://xkcd.com/1288/">this xkcd</a> and thought, <em>I never again will have to read boring news</em>
<a href="http://xkcd.com/1288/"><img src="http://imgs.xkcd.com/comics/substitutions.png" title="INSIDE ELON MUSK'S NEW ATOMIC CAT" alt="Substitutions"></a></p>

<p>So I made a quick bookmarklet accomplish just that</p>

<h1><a href='javascript:(function(){var dict={"Witnesses":"these dudes I know","Allegedly":"kinda probably","New study":"tumblr post","Rebuild":"avenge","Space":"spaaace","Google Glass":"virtual Boy","Smartphone":"pokedex","Electric":"atomic","Senator":"elf-lord","Car":"cat","Election":"eating contest","Congressional leaders":"river spirits","Homeland security":"Homestar Runner","Could not be reached for comment":"is guilty and everyone knows it"};var dictRegex=new RegExp("(.)\\s*\\b("+Object.keys(dict).join("|").replace(/\s\s*/g, "\\s*")+")","gi");var dictReplacers=[];for(var i in dict)dictReplacers.push([new RegExp(i.replace(/\s\s*/g,"\\s"),"i"),dict[i]]);var textNodes=[];var all=document.getElementsByTagName("*");for(var i=0;i<all.length;i++)for(var j=0;j<all[i].childNodes.length;j++)if(all[i].childNodes[j].nodeType===3)textNodes.push(all[i].childNodes[j]);for(i=0;i<textNodes.length;i++)if(textNodes[i]&&textNodes[i].nodeValue)textNodes[i].nodeValue=textNodes[i].nodeValue.replace(dictRegex,function(all,preChar){console.log(preChar); for(var j=0;j<dictReplacers.length;j++)if(dictReplacers[j][0].test(all))return preChar+(!/[a-z\x27]/i.test(preChar)?dictReplacers[j][1].charAt(0).toUpperCase()+dictReplacers[j][1].slice(1):dictReplacers[j][1])})})();'>News Interestinger</a></h1>


<p>Hint: Click it and watch the text in the code change.</p>

<p>Source:</p>

<div>
  <pre><code class='javascript'>var dict = {
    &quot;Witnesses&quot;: &quot;these dudes I know&quot;,
    &quot;Allegedly&quot;: &quot;kinda probably&quot;,
    &quot;New study&quot;: &quot;tumblr post&quot;,
    &quot;Rebuild&quot;: &quot;avenge&quot;,
    &quot;Space&quot;: &quot;spaaace&quot;,
    &quot;Google Glass&quot;: &quot;virtual Boy&quot;,
    &quot;Smartphone&quot;: &quot;pokedex&quot;,
    &quot;Electric&quot;: &quot;atomic&quot;,
    &quot;Senator&quot;: &quot;elf-lord&quot;,
    &quot;Car&quot;: &quot;cat&quot;,
    &quot;Election&quot;: &quot;eating contest&quot;,
    &quot;Congressional leaders&quot;: &quot;river spirits&quot;,
    &quot;Homeland security&quot;: &quot;Homestar Runner&quot;,
    &quot;Could not be reached for comment&quot;: &quot;is guilty and everyone knows it&quot;
}
var dictRegex = new RegExp('(.)\\s*\\b(' + Object.keys(dict).join('|').replace(/\s\s*/g, '\\s*') + ')', 'gi');
var dictReplacers = [];
for (var i in dict) {
    dictReplacers.push([new RegExp(i.replace(/\s\s*/g, '\\s'), 'i'), dict[i]])
}
var textNodes = [];
var all = document.getElementsByTagName('*');
for (var i = 0; i &lt; all.length; i++) {
    for (var j = 0; j &lt; all[i].childNodes.length; j++) {
        if (all[i].childNodes[j].nodeType === 3) {            
            textNodes.push(all[i].childNodes[j]);
        }
    }
}
for (i = 0; i &lt; textNodes.length; i++) {
    if (textNodes[i] &amp;&amp; textNodes[i].nodeValue) {
        textNodes[i].nodeValue = textNodes[i].nodeValue.replace(dictRegex, function(all, preChar) {
            console.log(preChar)
            for (var j = 0; j &lt; dictReplacers.length; j++) {
                if (dictReplacers[j][0].test(all)) {
                    return preChar + (!/[a-z\x27]/i.test(preChar) ?
                        dictReplacers[j][1].charAt(0).toUpperCase() + dictReplacers[j][1].slice(1) :
                        dictReplacers[j][1])
                }
            }
        });
    }
}</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Circular Doubly Linked List]]></title>
    <link href="http://kolodny.github.io/blog/blog/2013/10/18/circular-doubly-linked-list/"/>
    <updated>2013-10-18T11:10:00-04:00</updated>
    <id>http://kolodny.github.io/blog/blog/2013/10/18/circular-doubly-linked-list</id>
    <content type="html"><![CDATA[<p>I was working on a cycling plugin for javascript and kept getting bogged down by accessing the prev and next elements in the array. I kept having to do things like:</p>

<div>
  <pre><code class='javascript'>function step() {
    var currentItem = items[currentIndex];
    var nextItem = items[(currentIndex + 1) % items.length];
    var prevItem = items[(items.length + currentIndex - 1) % items.length];
    // more code
    index = (index + 1) % items.length
}</code></pre>
</div>


<p>While this is doable it just seems like a pain.<br/>
Giving it more thought I realized that a <a href="http://en.wikipedia.org/wiki/Linked_list#Circular_list">circular doubly linked list</a> would be a great solution to this:</p>

<div data-height="257" data-theme-id="1527" data-slug-hash="cGdke" data-user="kolodny" data-default-tab="js" class='codepen'><pre><code>

var list = [{label: &#x27;first&#x27;}, {label: &#x27;second&#x27;}, {label: &#x27;third&#x27;}];
var circled = circleLink(list);

assert(circled[0].next === circled[1]);
assert(circled[1].next === circled[2]);
assert(circled[2].next === circled[0]);

assert(circled[0].prev === circled[2]);
assert(circled[1].prev === circled[0]);
assert(circled[2].prev === circled[1]);

document.write(circled[0].index + &#x27;&lt;br&gt;&#x27;);
document.write(circled[1].index + &#x27;&lt;br&gt;&#x27;);
document.write(circled[2].index + &#x27;&lt;br&gt;&#x27;);
document.write(circled[0].next.next.next.prev.prev.index + &#x27;&lt;br&gt;&#x27;);

function circleLink(array) {
  var linkedListCircle = []
  for (var i = 0; i &lt; array.length; i++) {
    linkedListCircle[i] = array[i];
    linkedListCircle[i].index = i;
    if (i &gt; 0) {
      linkedListCircle[i].prev = linkedListCircle[i - 1];
    }
  }
  linkedListCircle[0].prev = linkedListCircle[i - 1]
  for (var i = 0; i &lt; array.length - 1; i++) {
    linkedListCircle[i].next = linkedListCircle[i + 1];
  }
  linkedListCircle[i].next = linkedListCircle[0];
  return linkedListCircle;
}
function assert(assertion) { document.write((assertion ? true : false) + &#x27;&lt;br&gt;&#x27;) }
</code></pre>
<p>See the Pen <a href='http://codepen.io/kolodny/pen/cGdke'>%= penName %></a> by Moshe Kolodny (<a href='http://codepen.io/kolodny'>@kolodny</a>) on <a href='http://codepen.io'>CodePen</a></p>
</div>


<script async src="https://codepen.io/assets/embed/ei.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devtools Copy to Clipboard]]></title>
    <link href="http://kolodny.github.io/blog/blog/2013/10/16/devtools-copy-to-clipboard/"/>
    <updated>2013-10-16T11:08:00-04:00</updated>
    <id>http://kolodny.github.io/blog/blog/2013/10/16/devtools-copy-to-clipboard</id>
    <content type="html"><![CDATA[<p>I was playing around with devtools and i saw in the autocomplete list of functions had <code>copy()</code><br/>
It does what it sounds like it does (copies text to the clipboard)</p>

<div>
  <pre><code class='javascript'>&gt; copy(&quot;I'm about to hit ctrl+v&quot;)
undefined
&gt; I'm about to hit ctrl+v</code></pre>
</div>


<p>Very useful for when you need to manipulate large chunks of text.</p>

<p>Works in Devtools and Firebug (at least)</p>
]]></content>
  </entry>
  
</feed>
